name: Create Release

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install pytz
          sudo apt-get update && sudo apt-get install -y jq

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update && sudo apt-get install -y gh

      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Find base commit
        id: find_base
        run: |
          #!/bin/bash
          set -e
          prev_tag=$(git tag -l "v[0-9][0-9][0-9][0-9][0-9][0-9][0-9]-post*" | sort -V | tail -n1)
          if [ -n "$prev_tag" ]; then
            base_commit=$(git rev-parse "$prev_tag^{commit}")
          else
            base_commit=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "base_commit=$base_commit"
          echo "prev_tag_exists=$(if [ -n "$prev_tag" ]; then echo "true"; else echo "false"; fi)"
          echo "base_commit=$base_commit" >> $GITHUB_ENV
          echo "prev_tag_exists=${prev_tag:+true}" >> $GITHUB_ENV

      - name: Get changed files
        id: get_changes
        run: |
          #!/bin/bash
          set -e
          IFS=$'\n'
          
          # 使用环境文件存储文件列表
          added_file_list=$(mktemp)
          modified_file_list=$(mktemp)
          
          # 获取变化的文件
          while read -r line; do
            status=$(echo "$line" | cut -f1)
            file=$(echo "$line" | cut -f2)
            if [[ "$file" == static/* || "$file" == dynamic/* ]]; then
              case "$status" in
                A)
                  echo "$file" >> "$added_file_list"
                  ;;
                M)
                  echo "$file" >> "$modified_file_list"
                  ;;
              esac
            fi
          done < <(git diff --name-status "$base_commit" HEAD -- static/ dynamic/)

          # 保存到环境变量（指向临时文件）
          echo "added_file_list=$added_file_list" >> $GITHUB_ENV
          echo "modified_file_list=$modified_file_list" >> $GITHUB_ENV
          
          # 检查是否需要创建release
          if [ "$(wc -l < "$added_file_list")" -eq 0 ] && [ "$(wc -l < "$modified_file_list")" -eq 0 ] && [ "${prev_tag_exists}" = "true" ]; then
            echo "need_create_release=false" >> $GITHUB_ENV
          else
            echo "need_create_release=true" >> $GITHUB_ENV
          fi

      - name: Check need create release
        if: env.need_create_release == 'false'
        run: echo "No changes in static/dynamic folders or not first run. Skip."

      - name: Create release assets
        if: env.need_create_release == 'true'
        run: |
          #!/bin/bash
          set -e
          # 获取UTC+8日期
          date_utc8=$(python3 -c "
          from datetime import datetime, timedelta
          import pytz
          now_utc = datetime.utcnow().replace(tzinfo=pytz.utc)
          now_utc8 = now_utc.astimezone(pytz.timezone('Asia/Shanghai'))
          print(now_utc8.strftime('%Y%m%d'))
          ")
          echo "date_utc8=$date_utc8" >> $GITHUB_ENV

          # 获取当天发布次数
          OWNER_REPO=${GITHUB_REPOSITORY}
          API_URL="https://api.github.com/repos/$OWNER_REPO/releases?per_page=100"
          response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "$API_URL")
          current_count=0
          echo "$response" | jq -r '.[].tag_name' | grep -E "^v${date_utc8}-post[0-9]+$" | sed -E "s/^v${date_utc8}-post([0-9]+)$/\1/" | sort -n | tail -1 | while read count; do
            current_count=$count
          done
          next_count=$((current_count + 1))
          echo "today_post_count=$next_count" >> $GITHUB_ENV

          # 构建版本号
          release_version="v${date_utc8}-post${next_count}"
          detail_version="${release_version}-detail"
          echo "release_version=$release_version" >> $GITHUB_ENV
          echo "detail_version=$detail_version" >> $GITHUB_ENV

          # 读取文件列表
          mapfile -t added < "${added_file_list}"
          mapfile -t modified < "${modified_file_list}"

          # 生成release body
          body=""
          detail_body=""

          # 处理新增文件
          if [ "${#added[@]}" -gt 0 ]; then
            body+="### 新建的文件\n"
            detail_body+="# 新建的文件\n"
            for file in "${added[@]}"; do
              title=$(head -n 1 "$file" 2>/dev/null | sed 's/^# //; s/\r//')
              url="https://github.com/${GITHUB_REPOSITORY}/blob/${GITHUB_SHA}/${file}"
              body+="[$title]($url)\n"
              detail_body+="[$title]($url)\n\n\`\`\`\n$(cat "$file" | sed 's/\r//')\n\`\`\`\n"
            done
          fi

          # 处理修改文件
          if [ "${#modified[@]}" -gt 0 ]; then
            body+="### 更改的文件\n"
            detail_body+="# 更改的文件\n"
            for file in "${modified[@]}"; do
              title=$(head -n 1 "$file" 2>/dev/null | sed 's/^# //; s/\r//')
              url="https://github.com/${GITHUB_REPOSITORY}/blob/${GITHUB_SHA}/${file}"
              body+="[$title]($url)\n"
              detail_body+="[$title]($url)\n\n\`\`\`\n$(cat "$file" | sed 's/\r//')\n\`\`\`\n"
            done
          fi

          echo "release_body=$(printf "%s" "$body")" >> $GITHUB_ENV
          echo "detail_body=$(printf "%s" "$detail_body")" >> $GITHUB_ENV

      - name: Create releases
        if: env.need_create_release == 'true'
        run: |
          #!/bin/bash
          set -e
          gh auth login --with-token <<< "$GITHUB_TOKEN"
          gh release create "$release_version" \
            --title "$release_version" \
            --notes "$release_body" \
            --target "${GITHUB_SHA}"
          gh release create "$detail_version" \
            --title "$detail_version" \
            --notes "$detail_body" \
            --target "${GITHUB_SHA}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          release_version: ${{ env.release_version }}
          detail_version: ${{ env.detail_version }}
          release_body: ${{ env.release_body }}
          detail_body: ${{ env.detail_body }}
          GITHUB_SHA: ${{ github.sha }}